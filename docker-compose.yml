services:
  app:
    image: nginx:latest
    container_name: pillsync_nginx
    restart: always
    ports:
      - 80:80
      - 443:443
    expose:
      - 80:80
      - 443:443
    depends_on:
        - api
    volumes:
      - ./packages/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./secrets/certs/cert.crt:/etc/nginx/ssl/cert.crt:ro
      - ./secrets/certs/key.key:/etc/nginx/ssl/key.key:ro
    extra_hosts:
      - "host.docker.internal:host-gateway"

  api:
    container_name: pillsync_api
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    depends_on:
      - mongo
      - redis
    ports:
      - 3001:3001
    networks:
      - app_network
      - mongo_network
      - redis_network

  mongo:
      image: mongo:8.0
      container_name: pillsync_mongo
      restart: always
      command: [
        "--replSet", "rs0",
        "--bind_ip_all",
        "--port", "27017",
      ]
      env_file: .env
      volumes:
        - mongo_data:/data/db
      ports:
        - 27017:27017
      networks:
        - mongo_network
      extra_hosts:
        - "host.docker.internal:host-gateway"
      healthcheck:
       test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
       interval: 5s
       timeout: 30s
       start_period: 0s
       start_interval: 1s
       retries: 30

  redis:
      image: redis:alpine
      container_name: pillsync_redis
      restart: always
      command: redis-server
      env_file: .env
      volumes:
        - /var/lib/redis:/var/lib/redis
      ports:
        - 6379:6379
      networks:
        - redis_network

volumes:
  mongo_data:
    driver: local

networks:
  app_network:
    external: true

  mongo_network:
    driver: bridge

  redis_network:
      driver: bridge
